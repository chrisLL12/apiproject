let express,graphqlHTTP,resolvers,schema;_111‍.x([["default",()=>_111‍.o]]);_111‍.w("express",[["default",["express"],function(v){express=v}]]);_111‍.w("express-graphql",[["default",["graphqlHTTP"],function(v){graphqlHTTP=v}]]);_111‍.w("./graphql/resolvers",[["default",["resolvers"],function(v){resolvers=v}]]);_111‍.w("./graphql/schema",[["default",["schema"],function(v){schema=v}]]);




const app = express();
app.use(express.json());

const env = process.env.NODE_ENV || 'development';

app.use('/api/graphql', graphqlHTTP ({
    schema,
    rootValue: resolvers,
    graphiql: env === 'development'
}));

// Test data
const fakeData = {
    'cool': {job: 'mailman', pet: 'cat'},
    'dood': {job: 'student', pet: 'dog'},
    'swet': {job: 'teacher', pet: 'bird'}
};

app.get('/api/users', (req, res) => {
    const allUsernames = Object.keys(fakeData);
    _111‍.g.console.log(allUsernames);
    res.send(allUsernames);
});

const staticRoute = express.static('public');
app.use('/static', staticRoute);
app.use('/', staticRoute);

app.listen(8000, () =>
    console.log(`Listening on port 8000!`));

_111‍.d(app);
